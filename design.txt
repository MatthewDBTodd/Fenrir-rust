Board class:
-- Bitboard
-- whose turn: enum Colour
-- move num
-- half move num
-- castling rights: struct/enum? whether that side has castled or not on each side
-- en passant square: Option<Square>
-- move history: Vec<Move> stack?
-- board hash

fn GenerateCandidateMoves(&self) -> Vec<Move>;
fn MakeMove(&mut self, move: &Move);
FenToBoard(fen: &str) -> Result<Board>;
Print, DebugPrint

BitBoard class:
-- white,
-- black,
-- white pawns
-- black pawns
-- white king,
-- black king,
-- white queen,
-- black queen,
-- white bishops,
-- black bishops,
-- white knights,
-- black knights,
-- white rooks,
-- black rooks

BitBoard functions needed:
fn PlacePiece(&mut self, colour: Colour, piece: Piece, square: Square);
fn RemovePiece(&mut self, colour: Colour, piece: Piece, square: Square);
fn GetPieceMask(&self, colour: Colour, piece: Piece) -> u64;
fn GetColourMask(&self, colour: Colour) -> u64;
fn GetAllMask(&self) -> u64;
Print, DebugPrint

Move class:
-- source square
-- destination square
-- Move type (quiet move, capture, en-passant, move-promotion, capture-promotion) if en-passant, can work out where to put back pawn
-- Captured Piece (for undoing)


enums:
Colour: White,Black
Square: A1,A2...H7,H8
Piece: Pawn, King, Queen, Bishop, Knight, Rook
MoveType: Quiet, Capture(Piece), EnPassant, MovePromotion(Piece), CapturePromotion(Piece)

Use inbuilt u64 functions when you can: e.g. `count_ones()`

   h8   g8   f8   e8   d8   c8   b8   a8   h7   g7   f7   e7   d7   c7   b7   a7   h6   g6   f6   e6   d6   c6   b6   a6   h5   g5   f5   e5   d5   c5   b5   a5   h4   g4   f4   e4   d4   c4   b4   a4   h3   g3   f3   e3   d3   c3   b3   a3   h2   g2   f2   e2   d2   c2   b2   a2   h1   g1   f1   e1   d1   c1   b1   a1
    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0   

Ways to check if a king is check:
- after making a move, loop through the pieces, place that piece on the king square and generate it's
attacking squares, then intersect that with the opposing colour mask of that piece 
- could also store constantly updated bitboards for each piece with those attacking squares, but 
i'm not really sure that would gain you anything, cos you would still need to update it when testing
a pseudo-legal move as the bitboards would need updating anyway

- could instead just not check moves for legality, and instead allow kings to be captured and simply
return -infinity so that branch never gets selected
- in our board eval position we would simply return -infinity if the king mask is 0?
- but not sure how we would deal with the horizon effect, i.e. what if we stop our search where
the next move would lead to mate, we might return a positive value ignoring the fact that we illegally
left ourselves in check
- could combat that by always stopping the search after the opposing players turn?
- but would still have the flaw that we might incorrectly evaluate a branch as bad for us as the last
move generated for the opposing player left them in checkmate

- before generating pseudo-legal moves, first check which pieces are pinned:
- place a bishop on the king square and calculate it's pseudo-legal attack squares
- for each bishop on the opposing colour, generate its pseudo-legal attack squares 
- for each queen on the opposing colour, place a bishop on that square and generate its pseudo-legal attacks
- intersect those bitboards and mask the result with the kings colour, if there's a match that piece 
is pinned 
- do the same for the rook again with the queen (but acting as a rook)
- for all non-king pieces that are NOT pinned, you don't have to test for legality 
- for the king, still do 
- when doing en-passant, have to test for legality, but it's rare enough that it won't affect performance

// returns a bitboard of squares that have a pinned piece
// for this example, assumes it's white to move
fn get_pinned_pieces()
   get king mask 
   get white bishop attack squares for the king square
   for all bishops on opposing colour: 
      get attack squares 
      pinned_by_bishop = (white_bishop_attacks & black_bishop_attacks) & white_bitboard
   
   // means we need to check for queen diagonal pins too, if we already found a diagonal pin we 
   // don't need to check for queen diagonal pins because they'll be on the same diagonal
   if NOT found a bishop pin:
      for all queens on opposing colour:
         get bishop attack squares from that queen square 
         pinned_by_queen = (white_bishop_attacks & black_queen_bishop_attacks) & white_bitboard 

   then do the same for the rook
   
this is flawed, sliding pieces are calculated for all directions at once, meaning 
the board 8/4b3/8/2R5/8/4K3/8/8 w - - 0 1 will show the rook as pinned as both the 
bishop and the bishop on the king square attack it, even though they're on different
diagonals. 
can check if it's a genuine pin if the bishops mask overlaps with the king?
actually might be easier to just make constant bitmasks of sliding pieces including the edges 
then for each sliding piece, check if the mask overlaps with the king, and if it does, return 
mask & colour_mask 
for each sliding piece:
   for each direction
      if ray intercepts king:
         return ray & (colour_mask ^ king)
         break (as once we have a pin on a ray direction all other pins will be the same)
         
for each sliding piece:
   for each direction 
      place sliding piece on king square 
      if ray from king square intercepts an attacking sliding piece of same type (or queen):
         return ray_mask & own_colour_mask - doesn't work as it'll mark two pieces on the same ray as pinned
            - solution: a piece is only pinned if the ray_mask & own_colour_mask has a single bit set?
         break (as once we have a pin on a ray direction all other pins will pin to the same piece)

   
maybe find if king is in check while calculating the pinned squares?

board
attack table 
bitboard 


